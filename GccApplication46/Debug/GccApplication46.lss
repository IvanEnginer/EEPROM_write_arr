
GccApplication46.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000000d6  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         0000000a  00800060  000000d6  0000016a  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          0000000c  0080006a  0080006a  00000174  2**0
                  ALLOC
  3 .stab         000006b4  00000000  00000000  00000174  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      00000097  00000000  00000000  00000828  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .comment      0000002f  00000000  00000000  000008bf  2**0
                  CONTENTS, READONLY
  6 .debug_aranges 00000038  00000000  00000000  000008ee  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   0000023d  00000000  00000000  00000926  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 000000dd  00000000  00000000  00000b63  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   0000009d  00000000  00000000  00000c40  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  00000054  00000000  00000000  00000ce0  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    00000141  00000000  00000000  00000d34  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    00000103  00000000  00000000  00000e75  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000028  00000000  00000000  00000f78  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	09 c0       	rjmp	.+18     	; 0x14 <__ctors_end>
   2:	21 c0       	rjmp	.+66     	; 0x46 <__bad_interrupt>
   4:	20 c0       	rjmp	.+64     	; 0x46 <__bad_interrupt>
   6:	1f c0       	rjmp	.+62     	; 0x46 <__bad_interrupt>
   8:	1e c0       	rjmp	.+60     	; 0x46 <__bad_interrupt>
   a:	1d c0       	rjmp	.+58     	; 0x46 <__bad_interrupt>
   c:	1c c0       	rjmp	.+56     	; 0x46 <__bad_interrupt>
   e:	1b c0       	rjmp	.+54     	; 0x46 <__bad_interrupt>
  10:	1a c0       	rjmp	.+52     	; 0x46 <__bad_interrupt>
  12:	19 c0       	rjmp	.+50     	; 0x46 <__bad_interrupt>

00000014 <__ctors_end>:
  14:	11 24       	eor	r1, r1
  16:	1f be       	out	0x3f, r1	; 63
  18:	cf e9       	ldi	r28, 0x9F	; 159
  1a:	cd bf       	out	0x3d, r28	; 61

0000001c <__do_copy_data>:
  1c:	10 e0       	ldi	r17, 0x00	; 0
  1e:	a0 e6       	ldi	r26, 0x60	; 96
  20:	b0 e0       	ldi	r27, 0x00	; 0
  22:	e6 ed       	ldi	r30, 0xD6	; 214
  24:	f0 e0       	ldi	r31, 0x00	; 0
  26:	02 c0       	rjmp	.+4      	; 0x2c <__do_copy_data+0x10>
  28:	05 90       	lpm	r0, Z+
  2a:	0d 92       	st	X+, r0
  2c:	aa 36       	cpi	r26, 0x6A	; 106
  2e:	b1 07       	cpc	r27, r17
  30:	d9 f7       	brne	.-10     	; 0x28 <__do_copy_data+0xc>

00000032 <__do_clear_bss>:
  32:	20 e0       	ldi	r18, 0x00	; 0
  34:	aa e6       	ldi	r26, 0x6A	; 106
  36:	b0 e0       	ldi	r27, 0x00	; 0
  38:	01 c0       	rjmp	.+2      	; 0x3c <.do_clear_bss_start>

0000003a <.do_clear_bss_loop>:
  3a:	1d 92       	st	X+, r1

0000003c <.do_clear_bss_start>:
  3c:	a6 37       	cpi	r26, 0x76	; 118
  3e:	b2 07       	cpc	r27, r18
  40:	e1 f7       	brne	.-8      	; 0x3a <.do_clear_bss_loop>
  42:	31 d0       	rcall	.+98     	; 0xa6 <main>
  44:	46 c0       	rjmp	.+140    	; 0xd2 <_exit>

00000046 <__bad_interrupt>:
  46:	dc cf       	rjmp	.-72     	; 0x0 <__vectors>

00000048 <_Z16EEPROM_write_arriiPi>:
#include <avr/io.h>
void EEPROM_write_arr(int address, int lenght, int *data)
{
  48:	fa 01       	movw	r30, r20
	while (lenght)
  4a:	61 15       	cp	r22, r1
  4c:	71 05       	cpc	r23, r1
  4e:	71 f0       	breq	.+28     	; 0x6c <_Z16EEPROM_write_arriiPi+0x24>
#include <avr/io.h>
void EEPROM_write_arr(int address, int lenght, int *data)
  50:	68 0f       	add	r22, r24
  52:	79 1f       	adc	r23, r25
{
	while (lenght)
	{
		while (EECR & (1<<1));
  54:	e1 99       	sbic	0x1c, 1	; 28
  56:	fe cf       	rjmp	.-4      	; 0x54 <_Z16EEPROM_write_arriiPi+0xc>
		EEAR = address;
  58:	8e bb       	out	0x1e, r24	; 30
		address = address + 1;
  5a:	01 96       	adiw	r24, 0x01	; 1
		EEDR = *data;
  5c:	20 81       	ld	r18, Z
  5e:	2d bb       	out	0x1d, r18	; 29
		data = data + 1;
  60:	32 96       	adiw	r30, 0x02	; 2
		EECR |= (1 << 2);
  62:	e2 9a       	sbi	0x1c, 2	; 28
		EECR |= (1 << 1);
  64:	e1 9a       	sbi	0x1c, 1	; 28
#include <avr/io.h>
void EEPROM_write_arr(int address, int lenght, int *data)
{
	while (lenght)
  66:	86 17       	cp	r24, r22
  68:	97 07       	cpc	r25, r23
  6a:	a1 f7       	brne	.-24     	; 0x54 <_Z16EEPROM_write_arriiPi+0xc>
  6c:	08 95       	ret

0000006e <_Z15EEPROM_read_arriiPi>:
		EECR |= (1 << 1);
		lenght = lenght -1;	
	}
}
void EEPROM_read_arr(int address, int lenght, int *data)
{
  6e:	fa 01       	movw	r30, r20
	while (EECR & (1 << 1));
  70:	e1 99       	sbic	0x1c, 1	; 28
  72:	fe cf       	rjmp	.-4      	; 0x70 <_Z15EEPROM_read_arriiPi+0x2>
	while (lenght--)
  74:	61 15       	cp	r22, r1
  76:	71 05       	cpc	r23, r1
  78:	61 f0       	breq	.+24     	; 0x92 <_Z15EEPROM_read_arriiPi+0x24>
		EECR |= (1 << 2);
		EECR |= (1 << 1);
		lenght = lenght -1;	
	}
}
void EEPROM_read_arr(int address, int lenght, int *data)
  7a:	68 0f       	add	r22, r24
  7c:	79 1f       	adc	r23, r25
{
	while (EECR & (1 << 1));
	while (lenght--)
	{
		EEAR = address++;
  7e:	8e bb       	out	0x1e, r24	; 30
  80:	01 96       	adiw	r24, 0x01	; 1
		EECR |= (1 << 0);
  82:	e0 9a       	sbi	0x1c, 0	; 28
		*data = EEDR;
  84:	2d b3       	in	r18, 0x1d	; 29
  86:	20 83       	st	Z, r18
  88:	11 82       	std	Z+1, r1	; 0x01
		data++;
  8a:	32 96       	adiw	r30, 0x02	; 2
	}
}
void EEPROM_read_arr(int address, int lenght, int *data)
{
	while (EECR & (1 << 1));
	while (lenght--)
  8c:	86 17       	cp	r24, r22
  8e:	97 07       	cpc	r25, r23
  90:	b1 f7       	brne	.-20     	; 0x7e <_Z15EEPROM_read_arriiPi+0x10>
  92:	08 95       	ret

00000094 <_Z4ReadiPi>:
	}
}

void Read(int address, int *data)
{
	while (EECR & (1 << 1));
  94:	e1 99       	sbic	0x1c, 1	; 28
  96:	fe cf       	rjmp	.-4      	; 0x94 <_Z4ReadiPi>
	{
		EEAR = address;
  98:	8e bb       	out	0x1e, r24	; 30
		EECR |= (1 << 0);
  9a:	e0 9a       	sbi	0x1c, 0	; 28
		*data = EEDR;
  9c:	8d b3       	in	r24, 0x1d	; 29
  9e:	fb 01       	movw	r30, r22
  a0:	80 83       	st	Z, r24
  a2:	11 82       	std	Z+1, r1	; 0x01
  a4:	08 95       	ret

000000a6 <main>:
}

int main(void)
{
	static int arr_iz_ram_v_eeprom[5] ={1, 2, 3, 4, 10};
	EEPROM_write_arr(0x00, 5, &arr_iz_ram_v_eeprom[0]);
  a6:	40 e6       	ldi	r20, 0x60	; 96
  a8:	50 e0       	ldi	r21, 0x00	; 0
  aa:	65 e0       	ldi	r22, 0x05	; 5
  ac:	70 e0       	ldi	r23, 0x00	; 0
  ae:	80 e0       	ldi	r24, 0x00	; 0
  b0:	90 e0       	ldi	r25, 0x00	; 0
  b2:	ca df       	rcall	.-108    	; 0x48 <_Z16EEPROM_write_arriiPi>
	static int arr_iz_eeprom_v_ram[5];
	EEPROM_read_arr(0x00, 5, &arr_iz_eeprom_v_ram[0]);
  b4:	4a e6       	ldi	r20, 0x6A	; 106
  b6:	50 e0       	ldi	r21, 0x00	; 0
  b8:	65 e0       	ldi	r22, 0x05	; 5
  ba:	70 e0       	ldi	r23, 0x00	; 0
  bc:	80 e0       	ldi	r24, 0x00	; 0
  be:	90 e0       	ldi	r25, 0x00	; 0
  c0:	d6 df       	rcall	.-84     	; 0x6e <_Z15EEPROM_read_arriiPi>
	static int elemen_arr[1];
	Read(1, elemen_arr);
  c2:	64 e7       	ldi	r22, 0x74	; 116
  c4:	70 e0       	ldi	r23, 0x00	; 0
  c6:	81 e0       	ldi	r24, 0x01	; 1
  c8:	90 e0       	ldi	r25, 0x00	; 0
  ca:	e4 df       	rcall	.-56     	; 0x94 <_Z4ReadiPi>
  cc:	80 e0       	ldi	r24, 0x00	; 0
  ce:	90 e0       	ldi	r25, 0x00	; 0
  d0:	08 95       	ret

000000d2 <_exit>:
  d2:	f8 94       	cli

000000d4 <__stop_program>:
  d4:	ff cf       	rjmp	.-2      	; 0xd4 <__stop_program>
